@page "/Tecnico/Edit/{TecnicoID:int}"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager
@using RegistroTecnico.Models
@using System.ComponentModel.DataAnnotations

<PageTitle>Editar Técnico</PageTitle>

<div class="container mt-3">
    <div class="card shadow p-0">
        <div class="card-header text-center bg-primary text-white">
            <h2 class="card-title">Editar Tecnico</h2>
        </div>
                <EditForm Model="@tecnico" OnValidSubmit="Guardar">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row mb-3">
                        <label class="col-sm-3 col-form-label">ID:</label>
                        <div class="col-sm-9">
                            <InputNumber class="form-control" @bind-Value="tecnico.TecnicoID" disabled />
                            <small class="text-muted">El ID no se puede modificar</small>
                        </div>
                    </div>

                    <div class="row mb-3">
                        <label class="col-sm-3 col-form-label">Nombres:</label>
                        <div class="col-sm-9">
                            <InputText class="form-control" @bind-Value="tecnico.Nombres" placeholder="Ingrese el nombre del técnico" />
                            <ValidationMessage For="@(() => tecnico.Nombres)" />
                        </div>
                    </div>

                    <div class="row mb-3">
                        <label class="col-sm-3 col-form-label">Sueldo por Hora:</label>
                        <div class="col-sm-9">
                            <InputNumber class="form-control" @bind-Value="tecnico.SueldoHora" placeholder="0.00" />
                            <ValidationMessage For="@(() => tecnico.SueldoHora)" />
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(mensajeError))
                    {
                        <div class="alert alert-danger">
                            @mensajeError
                        </div>
                    }

                    <div class="card-footer accordion-button">
                        
                        <div class="col-7 text-end">

                            <a href="/Tecnico/Index" class="btn btn-outline-secondary">
                                <span class="bi bi-arrow-bar-left"></span> Volver
                            </a>

                            <button type="submit" class="btn btn-outline-success">
                                <span class="bi bi-check-circle-fill"></span> Guardar
                            </button>

                            <a href="/Tecnico/Delete/@tecnico.TecnicoID" class="btn btn-outline-danger">
                            <span class="bi bi-trash"></span>Eliminar    
                            </a>
                        </div>
                    </div>
                </EditForm>
            }
        </div>
    </div>


@code {
    [Parameter]
    public int TecnicoID { get; set; }

    private Tecnico? tecnico;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
           
            var tecnicos = await tecnicoService.Listar(t => t.TecnicoID == TecnicoID);
            tecnico = tecnicos.FirstOrDefault();

            if (tecnico == null)
            {
                navigationManager.NavigateTo("/Tecnico/Index");
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar datos: {ex.Message}";
        }
    }

    private async Task Guardar()
    {
        try
        {
            if (tecnico != null)
            {
                var guardado = await tecnicoService.Guardar(tecnico);

                if (guardado)
                {
                    navigationManager.NavigateTo("/Tecnico/Index");
                }
                else
                {
                    mensajeError = "No se pudo guardar los cambios.";
                }
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al guardar: {ex.Message}";
        }
    }
}