@page "/Tecnico/Index"
@rendermode InteractiveServer
@inject TecnicoService tecnicoService
@inject NavigationManager navigationManager

<PageTitle> Consulta de técnicos </PageTitle>
<div class="container mt-3">
    <div class="card shadow p-0">
        <div class="card-header text-center bg-primary text-white">
            <h2 class="card-title mb-0">Registro de técnicos</h2>
        </div>

        <div class="card-body">
            <div class="row align-items-end mb-1">
                <div class="col-3">
                    <label class="col-form-label"><strong>Filtrar por:</strong></label>
                </div>
                <div class="col-4">
                    <label class="col-form-label"><strong>Búsqueda</strong></label>
                </div>
                <div class="col-5 text-end">
                    <a href="/Tecnico/Create" class="btn btn-success">
                        <span class="bi bi-plus-square"></span> Crear
                    </a>
                </div>
            </div>

            <div class="row align-items-center">
                <div class="col-3">
                    <select class="form-select" @bind="filtro">
                        <option value="" selected>Todos</option>
                        <option value="Id">Tecnico Id</option>
                        <option value="Nombres">Nombre</option>
                        <option value="SueldoHora">Sueldo por Hora</option>
                    </select>
                </div>

                <div class="col-4">
                    <div class="input-group">
                        <input class="form-control" @bind="valorFiltro" @bind:event="oninput" @onkeyup="@EnterKeyPressed" placeholder="Buscar" />
                        <button type="button" class="btn btn-primary" @onclick="Buscar">
                            <span class="bi bi-search"></span> Buscar
                        </button>
                    </div>
                </div>
                
            </div>

            @if (!string.IsNullOrEmpty(mensajeError))
            {
                <div class="alert alert-danger mt-3">
                    @mensajeError
                </div>
            }
            else
            {
                <table class="table table-hover table-bordered text-center mt-4">
                    <thead class="table table-striped text-black">
                        <tr>
                            <th class="fw-semibold">Tecnico Id</th>
                            <th class="fw-semibold">Nombres</th>
                            <th class="fw-semibold">Sueldo por hora</th>
                            <th class="fw-semibold">Editar</th>
                            
                        </tr>
                    </thead>

                    <tbody>
                        @foreach (var tecnico in tecnicos)
                        {
                            <tr>
                                <td>@tecnico.TecnicoID</td>
                                <td>@tecnico.Nombres</td>
                                <td>@tecnico.SueldoHora.ToString("N2")</td>
                                <td class="text-center">
                                    <a href="/Tecnico/Edit/@tecnico.TecnicoID" class="bi bi-pencil-square fs-4"></a>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            }

        </div>
    </div>
</div>

@code {
    public List<Tecnico> tecnicos = new List<Tecnico>();
    public List<Tecnico> todosLosTecnicos = new List<Tecnico>();
    private string filtro = "";
    private string valorFiltro = "";
    private string mensajeError = "";


    protected override async Task OnInitializedAsync()
    {
        await CargarTecnicos();
    }

    private async Task CargarTecnicos()
    {
        try
        {
            tecnicos = await tecnicoService.Listar(t => true);
            todosLosTecnicos = new List<Tecnico>(tecnicos);
            mensajeError = "";
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al cargar datos: {ex.Message}";
        }
    }

    private async Task Buscar()
    {
        try
        {
            mensajeError = "";

            if (string.IsNullOrWhiteSpace(valorFiltro))
            {
                
                tecnicos = todosLosTecnicos;
            
                return;
            }
            
            switch (filtro.ToLower())
            {
                case "id":
                    if (int.TryParse(valorFiltro, out int tecnicoId))
                    {
                        tecnicos = todosLosTecnicos.Where(t => t.TecnicoID == tecnicoId).ToList();
                    }
                    else
                    {
                        mensajeError = "El ID debe ser un número válido.";
                        return;
                    }
                    break;

                case "nombres":
                    tecnicos = todosLosTecnicos.Where(t =>
                        t.Nombres != null &&
                        t.Nombres.ToLower().Contains(valorFiltro.ToLower())).ToList();
                    break;

                case "sueldohora":
                    if (float.TryParse(valorFiltro.Replace(",", "."),
                        System.Globalization.NumberStyles.Any,
                        System.Globalization.CultureInfo.InvariantCulture,
                        out float sueldo))
                    {
                        tecnicos = todosLosTecnicos.Where(t => Math.Abs(t.SueldoHora - sueldo) < 0.01f).ToList();
                    }
                    else
                    {
                        mensajeError = "El sueldo debe ser un número válido.";
                        return;
                    }
                    break;

                default:
                    
                    tecnicos = todosLosTecnicos.Where(t =>
                        (t.Nombres != null && t.Nombres.ToLower().Contains(valorFiltro.ToLower())) ||
                        (t.TecnicoID.ToString().Contains(valorFiltro)) ||
                        (t.SueldoHora.ToString().Contains(valorFiltro))).ToList();
                    break;
            }
        }
        catch (Exception ex)
        {
            mensajeError = $"Error al buscar: {ex.Message}";
        }
    }

    private void ReiniciarBusqueda()
    {
        valorFiltro = "";
        filtro = "";
        tecnicos = todosLosTecnicos;
        mensajeError = "";
    }

    private async Task EnterKeyPressed(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await Buscar();
        }
    }
}